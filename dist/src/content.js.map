{
  "version": 3,
  "sources": ["../../build/blob_animation.js", "../../build/util.js", "../../build/storage.js", "../../build/onboarding_options.js", "../../build/content.js"],
  "sourcesContent": ["// blob_animation.ts is a module which provides a class to easily instantiate the animations on the block page\nclass BlobElement {\n    constructor(x, y, r, is3D) {\n        this.x = this.originalX = x;\n        this.y = this.originalY = y;\n        this.r = r || 10;\n        this.element = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        this.fill = is3D ? 'url(#_r_gradient)' : '#A6B1CE';\n        // set styling\n        this.element.setAttribute('r', this.r.toString());\n        this.element.setAttribute('style', `fill: ${this.fill};`);\n    }\n    // update element\n    update(mouseX, mouseY, repulsion, attraction) {\n        const dx = this.x - mouseX;\n        const dy = this.y - mouseY;\n        const angle = Math.atan2(dy, dx);\n        const dist = repulsion / Math.sqrt(dx * dx + dy * dy);\n        this.x += Math.cos(angle) * dist;\n        this.y += Math.sin(angle) * dist;\n        this.x += (this.originalX - this.x) * attraction;\n        this.y += (this.originalY - this.y) * attraction;\n        this.element.setAttribute('cx', this.x.toString());\n        this.element.setAttribute('cy', this.y.toString());\n    }\n}\nexport default class BlobAnimation {\n    constructor(is3D) {\n        this.config = {\n            blur: 8,\n            alphaMult: 30,\n            alphaAdd: -10,\n            numSeeds: 6,\n            childrenPerSeed: 4,\n            childrenDistanceRange: 125,\n            circleMinRadius: 15,\n            circleMaxRadius: 75,\n            attraction: 0.1,\n            repulsion: 1000,\n        };\n        this.animate = () => {\n            requestAnimationFrame(this.animate);\n            this.elements.forEach((e) => {\n                e.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n            });\n        };\n        this.is3D = is3D;\n        // grab dom elements\n        this.svg = document.getElementById('svg');\n        this.colorMatrixF = document.getElementById('colorMatrixF');\n        // bind event listeners\n        const body = document.getElementById('reflect-main');\n        window.addEventListener('resize', this.onResize, false);\n        body.addEventListener('mousemove', (e) => {\n            this.mouseX = e.clientX;\n            this.mouseY = e.clientY;\n        }, false);\n        body.addEventListener('mouseleave', this.resetMouse, false);\n        // create initial svg g elements\n        this.onResize();\n        this.resetMouse();\n        this.initElements();\n        this.colorMatrixF.setAttribute('values', `1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 ${this.config.alphaMult} ${this.config.alphaAdd}`);\n    }\n    random(min, max) {\n        return min + Math.random() * (max - min);\n    }\n    randomRange(targ, range) {\n        return targ + (Math.random() * 2 - 1) * range;\n    }\n    initElements() {\n        // create group div with namespace\n        this.elements = [];\n        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.svg.appendChild(group);\n        // create seeds\n        for (let i = 0; i < this.config.numSeeds; i++) {\n            const e = new BlobElement(this.random(this.width * 0.4, this.width), this.randomRange(this.centerY, this.height * 0.4), this.random(this.config.circleMinRadius, this.config.circleMaxRadius), this.is3D);\n            e.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n            group.appendChild(e.element);\n            this.elements.push(e);\n        }\n        // add children to seeds\n        this.elements.forEach((e) => {\n            for (let j = 0; j < this.config.childrenPerSeed; j++) {\n                const child = new BlobElement(this.randomRange(e.x, this.config.childrenDistanceRange), this.randomRange(e.y, this.config.childrenDistanceRange), this.random(this.config.circleMinRadius, this.config.circleMaxRadius), this.is3D);\n                child.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n                group.appendChild(child.element);\n                this.elements.push(child);\n            }\n        });\n    }\n    // set mouse cords back to bottom centre screen\n    resetMouse() {\n        this.mouseX = this.centerX;\n        this.mouseY = 5 * this.centerY;\n    }\n    // recompute width, height, and centre\n    onResize() {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.centerX = this.width / 2;\n        this.centerY = this.height / 2;\n    }\n}\n", "// util.ts provides utility functions that can be reused in other modules\nexport function addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes * 60000);\n}\nexport function cleanDomain(urls, exact = false) {\n    // check to see if urls exist\n    if (urls[0] === undefined) {\n        // return empty if not\n        return '';\n    }\n    else {\n        // regex match for url\n        const activeURL = urls[0].match(exact ? /^[\\w]+:\\/{2}([^#?]+)/ : /^[\\w]+:\\/{2}([\\w\\.:-]+)/);\n        // no matching sites, return empty\n        if (activeURL == null) {\n            return '';\n        }\n        return activeURL[1];\n    }\n}\nexport function insertAfter(newNode, existingNode) {\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\n}\nexport function createDivFromHTML(htmlString) {\n    const newDiv = document.createElement('div');\n    newDiv.insertAdjacentHTML('beforeend', htmlString);\n    return newDiv;\n}\nexport function getElementFromForm(id) {\n    return document.getElementById(id);\n}\n", "// storage.ts provides a thin wrapper around the chrome storage api to make it easier to read/write from it\n// you can also find helper functions that read/write to chrome storage\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { addMinutes } from './util';\n// helper function to retrive chrome storage object\n// usage:\n//\n// getStorage(null).then(storage => {\n//     ...\n// })\nexport function getStorage() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            chrome.storage.local.get(null, (storage) => {\n                if (chrome.runtime.lastError) {\n                    reject(chrome.runtime.lastError);\n                }\n                else {\n                    resolve(storage);\n                }\n            });\n        });\n    });\n}\n// helper function to set fields in chrome storage\n// usage:\n//\n// getStorage({enableBlobs: false}).then(storage => {\n//     ...\n// })\nexport function setStorage(key) {\n    return new Promise((resolve, reject) => {\n        chrome.storage.local.set(key, () => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve();\n            }\n        });\n    });\n}\n// Add a single url to blocklist (does nothing if url is already in list)\nexport function addToBlocked(url, callback) {\n    getStorage().then((storage) => {\n        // url = cleanDomain([url]) === '' ? url : cleanDomain([url])\n        if (!storage.blockedSites.includes(url)) {\n            storage.blockedSites.push(url);\n            setStorage({ blockedSites: storage.blockedSites }).then(() => {\n                console.log(`${url} added to blocked sites`);\n                callback ? callback() : () => { };\n            });\n        }\n    });\n}\n// Remove single url from blocklist (does nothing if url is not in list)\nexport function removeFromBlocked(url) {\n    getStorage().then((storage) => {\n        let blockedSites = storage.blockedSites;\n        blockedSites = blockedSites.filter((e) => e !== url);\n        setStorage({ blockedSites: blockedSites }).then(() => {\n            console.log(`removed ${url} from blocked sites`);\n        });\n    });\n}\n// Add a single url to whitelist with associated whitelist duration\n// (replaces any existing entries)\nexport function addToWhitelist(url, minutes) {\n    getStorage().then((storage) => {\n        let whitelistedSites = storage.whitelistedSites;\n        let expiry = addMinutes(new Date(), minutes);\n        whitelistedSites[url] = expiry.toJSON();\n        setStorage({ whitelistedSites: whitelistedSites }).then(() => {\n            console.log(`${url} added to whitelisted sites`);\n        });\n    });\n}\nexport function logIntentToStorage(intentString, intentDate, url, accepted) {\n    getStorage().then((storage) => {\n        let intentList = storage.intentList;\n        // getting oldest date value from intent list map\n        let oldest_date = new Date();\n        for (const rawDate in intentList) {\n            const date = new Date(rawDate);\n            if (date < oldest_date) {\n                oldest_date = date;\n            }\n        }\n        // deleting oldest intent to keep intent count under limit\n        if (Object.keys(intentList).length > storage.numIntentEntries) {\n            console.log(`list full, popping ${oldest_date.toJSON()}`);\n            delete intentList[oldest_date.toJSON()];\n        }\n        // adding new intent and date to intent list\n        intentList[intentDate.toJSON()] = {\n            intent: intentString,\n            url: url,\n            accepted: accepted,\n        };\n        // saving intentList to chrome storage\n        setStorage({ intentList: intentList }).then(() => {\n            console.log(`logged intent \"${intentString}\"`);\n        });\n    });\n}\n", "import { getStorage, setStorage } from './storage';\nimport { createDivFromHTML, insertAfter, getElementFromForm } from './util';\nconst getSettingsHTMLString = () => {\n    return `\n    <table class=\"options_panel\">\n        <tr>\n            <td style=\"width:60%\">\n                <h3 class=\"setting\">enable blobs.</h3>\n                <p class=\"subtext\">whether to render the interactive blobs on the block page.</p>\n            </td>\n            <td>\n                <input class='toggle' id='enableBlobs' type='checkbox'>\n                <label class='toggle-button' for='enableBlobs'></label>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <h3 class=\"setting\">enable 3D.</h3>\n                <p class=\"subtext\">whether to enable the 3D-like effect on the blobs on the block page.</p>\n            </td>\n            <td>\n                <input class='toggle' id='enable3D' type='checkbox'>\n                <label class='toggle-button' for='enable3D'></label>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <h3 class=\"setting\">check intent.</h3>\n                <p class=\"subtext\">whether to enable checking if your intention is productive or not.</p>\n            </td>\n            <td>\n                <input class='toggle' id='checkIntent' type='checkbox'>\n                <label class='toggle-button' for='checkIntent'></label>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <h3 class=\"setting\">whitelist time.</h3>\n                <p class=\"subtext\">time allowed on a website after successful intent (minutes).</p>\n            </td>\n            <td>\n                <input id=\"whitelistTime\" type=\"number\" min=\"0\">\n            </td>\n        </tr>\n    </table>\n    <p id=\"statusMessage\">\n        <span id=\"statusContent\"></span>\n        <span>&nbsp;</span>\n    </p>\n    `;\n};\nconst saveSettings = () => {\n    const whitelistTime = getElementFromForm('whitelistTime').value;\n    const enableBlobs = getElementFromForm('enableBlobs').checked;\n    const enable3D = getElementFromForm('enable3D').checked;\n    const checkIntent = getElementFromForm('checkIntent').checked;\n    setStorage({\n        whitelistTime: whitelistTime,\n        enableBlobs: enableBlobs,\n        enable3D: enable3D,\n        checkIntent: checkIntent,\n    }).then(() => {\n        // Update status to let user know options were saved.\n        const status = document.getElementById('statusContent');\n        status.textContent = 'options saved.';\n        setTimeout(() => {\n            status.textContent = '';\n        }, 1500);\n    });\n};\nexport default () => {\n    document.addEventListener('DOMContentLoaded', () => {\n        getStorage().then((storage) => {\n            var _a, _b, _c;\n            getElementFromForm('whitelistTime').value = storage.whitelistTime;\n            getElementFromForm('enableBlobs').checked = (_a = storage.enableBlobs, (_a !== null && _a !== void 0 ? _a : true));\n            getElementFromForm('enable3D').checked = (_b = storage.enable3D, (_b !== null && _b !== void 0 ? _b : true));\n            getElementFromForm('checkIntent').checked = (_c = storage.checkIntent, (_c !== null && _c !== void 0 ? _c : true));\n        });\n        const optionsDiv = document.getElementById('options');\n        // change last button to say it will skip rather than setting settings\n        const goToEndButton = document.getElementById('page3button');\n        goToEndButton.innerText = 'skip.';\n        const newOptionsSection = createDivFromHTML(`\n            <div class=\"text-section\">\n                <h2>configure.</h2>\n                <p>buttons and knobs to customize your reflect experience.</p>\n                ${getSettingsHTMLString()}\n                <a id=\"saveButton\" class=\"lt-hover white_button shadow nextPage\">save!</a>\n            </div>\n            `);\n        insertAfter(newOptionsSection, optionsDiv);\n        document.getElementById('saveButton').addEventListener('click', saveSettings);\n    });\n};\n", "import BlobAnimation from './blob_animation';\nimport { getStorage, logIntentToStorage } from './storage';\nimport { cleanDomain } from './util';\nimport injectOptionsToOnboarding from './onboarding_options';\n// some constants\nconst REFLECT_INFO = '#576ca8';\nconst REFLECT_ERR = '#ff4a47';\nconst REFLECT_ONBOARDING_URL = 'https://getreflect.app/onboarding/';\nconst DEV_REFLECT_ONBOARDING_URL = 'http://localhost:1313/onboarding/';\n// as soon as page loads, check if we need to block it\ncheckIfBlocked();\n// re-check page everytime this page gets focus again\nwindow.addEventListener('focus', checkIfBlocked);\n// check to see if the current website needs to be blocked\nfunction checkIfBlocked() {\n    // if onboarding, inject options to page\n    if (window.location.href === REFLECT_ONBOARDING_URL ||\n        window.location.href === DEV_REFLECT_ONBOARDING_URL) {\n        injectOptionsToOnboarding();\n        return;\n    }\n    // if already on reflect page, don't need to re-block\n    if (!!document.getElementById('reflect-main')) {\n        return;\n    }\n    getStorage().then((storage) => {\n        if (!storage.isEnabled) {\n            return;\n        }\n        const strippedURL = getStrippedUrl();\n        const exactURL = cleanDomain([window.location.href], true);\n        // match current url against stored blocklist\n        storage.blockedSites.forEach((site) => {\n            // if google.com is blocked, meet.google.com includes .google.com --> meet.google.com is not blocked\n            // conversely if meet.google.com is blocked, google.com does not include meet.google.com --> google.com is not blocked\n            if (((!strippedURL.includes(`.${site}`) && strippedURL.includes(site)) || exactURL === site) &&\n                !isWhitelistedWrapper()) {\n                // found a match, check if currently on whitelist\n                iterWhitelist();\n            }\n        });\n    });\n}\n// display a message under intent entry field\nfunction displayStatus(message, duration = 3000, colour = REFLECT_INFO) {\n    $('#statusContent').css('color', colour);\n    $('#statusContent').text(message);\n    $('#statusContent').show().delay(duration).fadeOut();\n}\n// check to see if domain is whitelisted\nfunction isWhitelistedWrapper() {\n    const WHITELISTED_WRAPPERS = ['facebook.com/flx', 'l.facebook.com'];\n    return WHITELISTED_WRAPPERS.some((wrapper) => window.location.href.includes(wrapper));\n}\n// thin wrapper around util.ts/cleanDomain\nfunction getStrippedUrl() {\n    return cleanDomain([window.location.href]);\n}\nfunction iterWhitelist() {\n    // iterate whitelisted sites\n    getStorage().then((storage) => {\n        const strippedURL = getStrippedUrl();\n        if (strippedURL === '') {\n            return;\n        }\n        // get dictionary of whitelisted sites\n        const whitelist = storage.whitelistedSites;\n        // is current url whitelisted?\n        if (!whitelist.hasOwnProperty(strippedURL)) {\n            loadBlockPage();\n            return;\n        }\n        // check if whitelist period is expired\n        const parsedDate = new Date(whitelist[strippedURL]);\n        const currentDate = new Date();\n        const expired = currentDate >= parsedDate;\n        if (expired) {\n            loadBlockPage();\n            return;\n        }\n        const timeDifference = parsedDate.getTime() - currentDate.getTime();\n        // set timer to re-block page after whitelist period expires\n        setTimeout(() => {\n            loadBlockPage();\n        }, timeDifference);\n    });\n}\n// replace current page with reflect block page\nfunction loadBlockPage() {\n    const strippedURL = getStrippedUrl();\n    const prompt_page_url = chrome.runtime.getURL('res/pages/prompt.html');\n    const options_page_url = chrome.runtime.getURL('res/pages/options.html');\n    getStorage().then((storage) => {\n        // get prompt page content\n        $.get(prompt_page_url, (page) => {\n            var _a, _b;\n            // stop current page and replace with our blocker page\n            window.stop();\n            $('html').html(page);\n            addFormListener(strippedURL);\n            $('#linkToOptions').attr('href', options_page_url);\n            if (_a = storage.enableBlobs, (_a !== null && _a !== void 0 ? _a : true)) {\n                const anim = new BlobAnimation((_b = storage.enable3D, (_b !== null && _b !== void 0 ? _b : true)));\n                anim.animate();\n            }\n            // modify custom message based on user input\n            const welcome = document.getElementById('customMessageContent');\n            welcome.textContent = storage.customMessage || 'hey! what are you here for?';\n        });\n    });\n}\nfunction addFormListener(strippedURL) {\n    var _a;\n    const form = document.forms.namedItem('inputForm');\n    const button = document.getElementById('submitButton');\n    // add listener for form submit\n    (_a = form) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', (event) => {\n        var _a;\n        // prevent default submit\n        event.preventDefault();\n        // change button to loading state\n        (_a = button) === null || _a === void 0 ? void 0 : _a.setAttribute('disabled', 'disabled');\n        // extract entry\n        const intentForm = event.target;\n        const intent = new FormData(intentForm).get('intent');\n        const intentString = intent.toString();\n        callBackgroundWithIntent(intentString, strippedURL);\n    });\n}\nfunction callBackgroundWithIntent(intent, url) {\n    // open connection to runtime (background.ts)\n    const port = chrome.runtime.connect({\n        name: 'intentStatus',\n    });\n    // send message then wait for response\n    port.postMessage({ intent: intent, url: window.location.href });\n    port.onMessage.addListener((msg) => {\n        var _a;\n        switch (msg.status) {\n            case 'ok':\n                // show success message\n                getStorage().then((storage) => {\n                    const WHITELIST_PERIOD = storage.whitelistTime;\n                    displayStatus(`got it! ${WHITELIST_PERIOD} minutes starting now.`, 3000, REFLECT_INFO);\n                    location.reload();\n                });\n                break;\n            case 'too_short':\n                invalidIntent('your response is a little short. be more specific!');\n                break;\n            case 'invalid':\n                invalidIntent(\"that doesn't seem to be productive. try being more specific.\");\n                break;\n        }\n        // change button back to normal state\n        const button = document.getElementById('submitButton');\n        (_a = button) === null || _a === void 0 ? void 0 : _a.removeAttribute('disabled');\n        const accepted = msg.status === 'ok' ? 'yes' : 'no';\n        const intentDate = new Date();\n        logIntentToStorage(intent, intentDate, url, accepted);\n        // close connection\n        port.disconnect();\n    });\n}\nfunction invalidIntent(msg) {\n    $('#inputFields').effect('shake', { times: 3, distance: 5 });\n    displayStatus(msg, 3000, REFLECT_ERR);\n    $('#textbox').val('');\n}\n"],
  "mappings": "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",
  "names": []
}
