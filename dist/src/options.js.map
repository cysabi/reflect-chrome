{
  "version": 3,
  "sources": ["../../build/util.js", "../../build/storage.js", "../../build/options.js"],
  "sourcesContent": ["// util.ts provides utility functions that can be reused in other modules\nexport function addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes * 60000);\n}\nexport function cleanDomain(urls, exact = false) {\n    // check to see if urls exist\n    if (urls[0] === undefined) {\n        // return empty if not\n        return '';\n    }\n    else {\n        // regex match for url\n        const activeURL = urls[0].match(exact ? /^[\\w]+:\\/{2}([^#?]+)/ : /^[\\w]+:\\/{2}([\\w\\.:-]+)/);\n        // no matching sites, return empty\n        if (activeURL == null) {\n            return '';\n        }\n        return activeURL[1];\n    }\n}\nexport function insertAfter(newNode, existingNode) {\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\n}\nexport function createDivFromHTML(htmlString) {\n    const newDiv = document.createElement('div');\n    newDiv.insertAdjacentHTML('beforeend', htmlString);\n    return newDiv;\n}\nexport function getElementFromForm(id) {\n    return document.getElementById(id);\n}\n", "// storage.ts provides a thin wrapper around the chrome storage api to make it easier to read/write from it\n// you can also find helper functions that read/write to chrome storage\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { addMinutes } from './util';\n// helper function to retrive chrome storage object\n// usage:\n//\n// getStorage(null).then(storage => {\n//     ...\n// })\nexport function getStorage() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            chrome.storage.local.get(null, (storage) => {\n                if (chrome.runtime.lastError) {\n                    reject(chrome.runtime.lastError);\n                }\n                else {\n                    resolve(storage);\n                }\n            });\n        });\n    });\n}\n// helper function to set fields in chrome storage\n// usage:\n//\n// getStorage({enableBlobs: false}).then(storage => {\n//     ...\n// })\nexport function setStorage(key) {\n    return new Promise((resolve, reject) => {\n        chrome.storage.local.set(key, () => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve();\n            }\n        });\n    });\n}\n// Add a single url to blocklist (does nothing if url is already in list)\nexport function addToBlocked(url, callback) {\n    getStorage().then((storage) => {\n        // url = cleanDomain([url]) === '' ? url : cleanDomain([url])\n        if (!storage.blockedSites.includes(url)) {\n            storage.blockedSites.push(url);\n            setStorage({ blockedSites: storage.blockedSites }).then(() => {\n                console.log(`${url} added to blocked sites`);\n                callback ? callback() : () => { };\n            });\n        }\n    });\n}\n// Remove single url from blocklist (does nothing if url is not in list)\nexport function removeFromBlocked(url) {\n    getStorage().then((storage) => {\n        let blockedSites = storage.blockedSites;\n        blockedSites = blockedSites.filter((e) => e !== url);\n        setStorage({ blockedSites: blockedSites }).then(() => {\n            console.log(`removed ${url} from blocked sites`);\n        });\n    });\n}\n// Add a single url to whitelist with associated whitelist duration\n// (replaces any existing entries)\nexport function addToWhitelist(url, minutes) {\n    getStorage().then((storage) => {\n        let whitelistedSites = storage.whitelistedSites;\n        let expiry = addMinutes(new Date(), minutes);\n        whitelistedSites[url] = expiry.toJSON();\n        setStorage({ whitelistedSites: whitelistedSites }).then(() => {\n            console.log(`${url} added to whitelisted sites`);\n        });\n    });\n}\nexport function logIntentToStorage(intentString, intentDate, url, accepted) {\n    getStorage().then((storage) => {\n        let intentList = storage.intentList;\n        // getting oldest date value from intent list map\n        let oldest_date = new Date();\n        for (const rawDate in intentList) {\n            const date = new Date(rawDate);\n            if (date < oldest_date) {\n                oldest_date = date;\n            }\n        }\n        // deleting oldest intent to keep intent count under limit\n        if (Object.keys(intentList).length > storage.numIntentEntries) {\n            console.log(`list full, popping ${oldest_date.toJSON()}`);\n            delete intentList[oldest_date.toJSON()];\n        }\n        // adding new intent and date to intent list\n        intentList[intentDate.toJSON()] = {\n            intent: intentString,\n            url: url,\n            accepted: accepted,\n        };\n        // saving intentList to chrome storage\n        setStorage({ intentList: intentList }).then(() => {\n            console.log(`logged intent \"${intentString}\"`);\n        });\n    });\n}\n", "import { addToBlocked, getStorage, setStorage } from './storage';\nimport { cleanDomain, getElementFromForm } from './util';\nconst ENTER_KEY_CODE = 13;\n// On page load, draw table and add button listener\ndocument.addEventListener('DOMContentLoaded', () => {\n    // setup button listeners and draw tables\n    drawFilterListTable();\n    drawIntentListTable();\n    setAddButtonListener();\n    document.getElementById('linkToShortcuts').addEventListener('click', function () {\n        chrome.tabs.create({ url: 'chrome://extensions/shortcuts' });\n    });\n    // update threshold display value\n    const slider = document.getElementById('thresholdSlider');\n    const display = document.getElementById('thresholdSliderValue');\n    const sliderToValue = (slider) => `${Math.round(+slider.value * 100)}%`;\n    slider.oninput = () => {\n        display.innerHTML = sliderToValue(slider);\n    };\n    // set state of page based off of storage\n    getStorage().then((storage) => {\n        var _a, _b, _c, _d;\n        getElementFromForm('whitelistTime').value = storage.whitelistTime;\n        getElementFromForm('numIntentEntries').value = storage.numIntentEntries;\n        getElementFromForm('minIntentLength').value = (_a = storage.minIntentLength, (_a !== null && _a !== void 0 ? _a : 3));\n        getElementFromForm('customMessage').value = storage.customMessage || '';\n        getElementFromForm('enableBlobs').checked = (_b = storage.enableBlobs, (_b !== null && _b !== void 0 ? _b : true));\n        getElementFromForm('enable3D').checked = (_c = storage.enable3D, (_c !== null && _c !== void 0 ? _c : true));\n        getElementFromForm('checkIntent').checked = (_d = storage.checkIntent, (_d !== null && _d !== void 0 ? _d : true));\n        getElementFromForm('thresholdSlider').value = storage.predictionThreshold || 0.5;\n        display.innerHTML = sliderToValue(slider);\n    });\n    // options listeners\n    document.getElementById('save').addEventListener('click', saveCurrentOptions);\n});\nfunction saveCurrentOptions() {\n    // get all form values\n    const whitelistTime = getElementFromForm('whitelistTime').value;\n    const numIntentEntries = getElementFromForm('numIntentEntries').value;\n    const minIntentLength = getElementFromForm('minIntentLength').value;\n    const customMessage = getElementFromForm('customMessage').value;\n    const enableBlobs = getElementFromForm('enableBlobs').checked;\n    const enable3D = getElementFromForm('enable3D').checked;\n    const checkIntent = getElementFromForm('checkIntent').checked;\n    const predictionThreshold = getElementFromForm('thresholdSlider').value;\n    setStorage({\n        numIntentEntries: numIntentEntries,\n        whitelistTime: whitelistTime,\n        customMessage: customMessage,\n        enableBlobs: enableBlobs,\n        enable3D: enable3D,\n        checkIntent: checkIntent,\n        predictionThreshold: predictionThreshold,\n        minIntentLength: minIntentLength,\n    }).then(() => {\n        // Update status to let user know options were saved.\n        const status = document.getElementById('statusContent');\n        status.textContent = 'options saved.';\n        setTimeout(() => {\n            status.textContent = '';\n        }, 1500);\n    });\n}\nfunction updateButtonListeners() {\n    // get all buttons\n    const buttons = document.getElementsByTagName('button');\n    for (const button of buttons) {\n        button.addEventListener('click', () => {\n            var _a;\n            // get button ID\n            const id = parseInt(button.id[0]);\n            // get url\n            const url = (_a = document.getElementById(button.id[0] + 'site')) === null || _a === void 0 ? void 0 : _a.innerHTML;\n            // get blockedSites\n            getStorage().then((storage) => {\n                const blockedSites = storage.blockedSites;\n                // remove by ID\n                blockedSites.splice(id, 1);\n                // sync with chrome storage\n                setStorage({ blockedSites: blockedSites }).then(() => {\n                    console.log(`removed ${url} from blocked list`);\n                    drawFilterListTable();\n                });\n            });\n        });\n    }\n}\nfunction generateWebsiteDiv(id, site) {\n    return `<tr>\n    <td style=\"width: 95%\"><p class=\"urlDisplay\" id=${id}>${site}</p></td>\n    <td style=\"width: 5%\"><button id=${id}>&times;</button></td>\n    </tr>`;\n}\nfunction generateIntentDiv(id, intent, date, url, accepted) {\n    // reformatting date to only include month, date, and 12 hour time\n    const formattedDate = date.toLocaleDateString('default', {\n        month: 'long',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true,\n    });\n    // creating display table for intents and dates\n    return `<tr>\n      <td style=\"width: 20%\"><p class=\"intentDisplay\" id=${id}>${url}</p></td>\n      <td style=\"width: 40%\"><p class=\"intentDisplay\" id=${id}>${intent}</p></td>\n      <td style=\"width: 15%\"><p class=\"intentDisplay\" id=${id}>${accepted}</p></td>\n      <td style=\"width: 25%\"><p class=\"intentDisplay\" id=${id}>${formattedDate}</p></td>\n    </tr>`;\n}\nfunction drawFilterListTable() {\n    getStorage().then((storage) => {\n        const blockedSites = storage.blockedSites;\n        // appending row for each addiitonal blocked site\n        const tableContent = blockedSites.reduce((table, site, cur_id) => {\n            table += generateWebsiteDiv(cur_id, site);\n            return table;\n        }, '');\n        // generates new line in table for new intent\n        const table = `<table class=\"hover shadow styled\">${tableContent}</table>`;\n        // adds table to html\n        const filterList = document.getElementById('filterList');\n        if (filterList != null) {\n            filterList.innerHTML = table;\n        }\n        // adding listener to \"x\"\n        updateButtonListeners();\n    });\n}\nfunction drawIntentListTable() {\n    getStorage().then((storage) => {\n        const intentList = storage.intentList;\n        // generate table element\n        let table = `<table id=\"intentList\" class=\"hover shadow styled\">\n        <tr>\n        <th id=\"urlHeader\" style=\"width: 20%\">url</th>\n        <th style=\"width: 40%\">intent</th>\n        <th style=\"width: 15%\">accepted?</th>\n        <th style=\"width: 25%\">date</th>\n      </tr>`;\n        let cur_id = 0;\n        // iter dates in intentList\n        for (const rawDate in intentList) {\n            // if number of entries is less than max\n            if (cur_id < storage.numIntentEntries) {\n                // parse fields from intentlist[rawDate]\n                const date = new Date(rawDate);\n                const intent = intentList[rawDate].intent;\n                const url = intentList[rawDate].url;\n                const accepted = intentList[rawDate].accepted ? intentList[rawDate].accepted : 'n/a';\n                // append table row with this info\n                table += generateIntentDiv(cur_id, intent, date, url, accepted);\n                cur_id++;\n            }\n        }\n        // generates new line in table for new intent\n        table += '</table>';\n        // insert table into html\n        const previousIntents = document.getElementById('previousIntents');\n        if (previousIntents != null) {\n            previousIntents.innerHTML = table;\n        }\n    });\n}\n// sets event listeners for add new url operations\nfunction setAddButtonListener() {\n    const urlInputElement = document.getElementById('urlInput');\n    // add key listener to submit new url on <ENTER> pressed\n    urlInputElement.addEventListener('keypress', (event) => {\n        if (event.keyCode === ENTER_KEY_CODE) {\n            addUrlToFilterList();\n        }\n    });\n    // add click listener to add URL button\n    const addButton = document.getElementById('add');\n    addButton.addEventListener('click', () => {\n        addUrlToFilterList();\n    });\n}\nfunction addUrlToFilterList() {\n    // get urlInput\n    const urlInput = document.getElementById('urlInput');\n    // see if value is non-empty\n    if (urlInput.value !== '') {\n        const url = urlInput.value;\n        const cleanUrl = cleanDomain([url], true) === '' ? url : cleanDomain([url], true);\n        addToBlocked(cleanUrl, () => {\n            urlInput.value = '';\n            drawFilterListTable();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
